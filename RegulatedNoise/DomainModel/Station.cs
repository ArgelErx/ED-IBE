// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using Newtonsoft.Json;
using RegulatedNoise.Enums_and_Utility_Classes;

namespace RegulatedNoise.DomainModel
{
    public class Station
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("system")]
        public string System { get; set; }

        [JsonProperty("max_landing_pad_size")]
        public string MaxLandingPadSize { get; set; }

        [JsonProperty("distance_to_star")]
        public int? DistanceToStar { get; set; }

        [JsonProperty("faction")]
        public string Faction { get; set; }

        [JsonProperty("government")]
        public string Government { get; set; }

        [JsonProperty("allegiance")]
        public string Allegiance { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("has_blackmarket")]
        public bool? HasBlackmarket { get; set; }

        [JsonProperty("has_commodities")]
        public bool? HasCommodities { get; set; }

        [JsonProperty("has_refuel")]
        public bool? HasRefuel { get; set; }

        [JsonProperty("has_repair")]
        public bool? HasRepair { get; set; }

        [JsonProperty("has_rearm")]
        public bool? HasRearm { get; set; }

        [JsonProperty("has_outfitting")]
        public bool? HasOutfitting { get; set; }

        [JsonProperty("has_shipyard")]
        public bool? HasShipyard { get; set; }

        [JsonProperty("available_ships")]
        public string[] AvailableShips { get; set; }

        [JsonProperty("import_commodities")]
        public string[] ImportCommodities { get; set; }

        [JsonProperty("export_commodities")]
        public string[] ExportCommodities { get; set; }

        [JsonProperty("prohibited_commodities")]
        public string[] ProhibitedCommodities { get; set; }

        [JsonProperty("economies")]
        public string[] Economies { get; set; }

        [JsonProperty("updated_at")]
        public int UpdatedAt { get; set; }

        public string Source { get; set; }

        /// <summary>
        /// creates a new station 
        /// </summary>
        public Station()
        {
            Reset();
        }

        /// <summary>
        /// creates a new station as a copy of another station
        /// only Id and SystemID must declared extra
        /// </summary>
        /// <param name="sourceStation">The source station.</param>
        public Station(Station sourceStation)
        {
            Reset();
            UpdateFrom(sourceStation, UpdateMode.Copy);
        }

        public void Reset()
        {
            Name = string.Empty;
            MaxLandingPadSize = null;
            DistanceToStar = null;
            Faction = null;
            Government = null;
            Allegiance = null;
            State = null;
            Type = null;
            HasBlackmarket = null;
            HasCommodities = null;
            HasRefuel = null;
            HasRepair = null;
            HasRearm = null;
            HasOutfitting = null;
            HasShipyard = null;

            ImportCommodities = new String[0];
            ExportCommodities = new String[0];
            ProhibitedCommodities = new String[0];
            Economies = new String[0];
        }

        /// <summary>
        /// true, if all data *except the two IDs* is equal (case insensitive)
        /// </summary>
        /// <param name="station">The station.</param>
        /// <returns></returns>
        public bool EquivalentTo(Station station)
        {
            if (ReferenceEquals(this, station)) return true;

            if (station == null) return false;
            return (ObjectCompare.EqualsNullable(this.Name, station.Name) &&
                    ObjectCompare.EqualsNullable(this.MaxLandingPadSize, station.MaxLandingPadSize) &&
                    ObjectCompare.EqualsNullable(this.DistanceToStar, station.DistanceToStar) &&
                    ObjectCompare.EqualsNullable(this.Faction, station.Faction) &&
                    ObjectCompare.EqualsNullable(this.Government, station.Government) &&
                    ObjectCompare.EqualsNullable(this.Allegiance, station.Allegiance) &&
                    ObjectCompare.EqualsNullable(this.State, station.State) &&
                    ObjectCompare.EqualsNullable(this.Type, station.Type) &&
                    ObjectCompare.EqualsNullable(this.HasBlackmarket, station.HasBlackmarket) &&
                    ObjectCompare.EqualsNullable(this.HasCommodities, station.HasCommodities) &&
                    ObjectCompare.EqualsNullable(this.HasRefuel, station.HasRefuel) &&
                    ObjectCompare.EqualsNullable(this.HasRepair, station.HasRepair) &&
                    ObjectCompare.EqualsNullable(this.HasRearm, station.HasRearm) &&
                    ObjectCompare.EqualsNullable(this.HasOutfitting, station.HasOutfitting) &&
                    ObjectCompare.EqualsNullable(this.HasShipyard, station.HasShipyard) &&
                    ObjectCompare.EqualsNullable(this.ImportCommodities, station.ImportCommodities) &&
                    ObjectCompare.EqualsNullable(this.ExportCommodities, station.ExportCommodities) &&
                    ObjectCompare.EqualsNullable(this.ProhibitedCommodities, station.ProhibitedCommodities) &&
                    ObjectCompare.EqualsNullable(this.Economies, station.Economies));
        }

        /// <summary>
        /// copy the values from another station exept for the ID
        /// </summary>
        /// <param name="source">The source.</param>
        /// <param name="updateMode">The update mode.</param>
        public void UpdateFrom(Station source, UpdateMode updateMode)
        {
            throw new NotImplementedException();

            Name = source.Name;
            MaxLandingPadSize = source.MaxLandingPadSize;
            DistanceToStar = source.DistanceToStar;
            Faction = source.Faction;
            Government = source.Government;
            Allegiance = source.Allegiance;
            State = source.State;
            Type = source.Type;
            HasBlackmarket = source.HasBlackmarket;
            HasCommodities = source.HasCommodities;
            HasRefuel = source.HasRefuel;
            HasRepair = source.HasRepair;
            HasRearm = source.HasRearm;
            HasOutfitting = source.HasOutfitting;
            HasShipyard = source.HasShipyard;

            ImportCommodities = source.ImportCommodities.CloneN();
            ExportCommodities = source.ExportCommodities.CloneN();
            ProhibitedCommodities = source.ProhibitedCommodities.CloneN();
            Economies = source.Economies.CloneN();
        }
    }
}
