// Generated by Xamasoft JSON Class Generator
// http://www.xamasoft.com/json-class-generator

using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace IBE.EDDN
{

    /// <summary>
    /// schema class,
    /// based on the structure from 
    /// https://github.com/jamesremuscat/EDDN/blob/master/schemas/commodity-v3.0.json
    /// </summary>
    internal partial class EDDNCommodity_v3
    {
        internal class Header_Class
        {

            [JsonProperty("softwareVersion")]
            public string SoftwareVersion { get; set; }

            [JsonProperty("gatewayTimestamp")]
            public string GatewayTimestamp { get; set; }

            [JsonProperty("softwareName")]
            public string SoftwareName { get; set; }

            [JsonProperty("uploaderID")]
            public string UploaderID { get; set; }
        }

    }


    internal partial class EDDNCommodity_v3
    {
        internal class Commodity_Class
        {

            [JsonProperty("name")]
            public string Name { get; set; }

            [JsonProperty("meanPrice")]
            public int MeanPrice { get; set; }

            [JsonProperty("buyPrice")]
            public int BuyPrice { get; set; }

            [JsonProperty("stock")]
            public int Stock { get; set; }

            [JsonProperty("stockBracket")]
            public int? StockBracket { get; set; }

            [JsonProperty("sellPrice")]
            public int SellPrice { get; set; }

            [JsonProperty("demand")]
            public int Demand { get; set; }

            [JsonProperty("demandBracket")]
            public int? DemandBracket { get; set; }
        }
    }

    internal partial class EDDNCommodity_v3
    {
        internal class Message_Class
        {

            [JsonProperty("commodities")]
            public Commodity_Class[] Commodities { get; set; }

            [JsonProperty("timestamp")]
            public string Timestamp { get; set; }

            [JsonProperty("systemName")]
            public string SystemName { get; set; }

            [JsonProperty("stationName")]
            public string StationName { get; set; }
        }
    }

    internal partial class EDDNCommodity_v3
    {

        [JsonProperty("header")]
        public Header_Class Header { get; set; }

        [JsonProperty("$schemaRef")]
        public string SchemaRef { get; set; }

        [JsonProperty("message")]
        public Message_Class Message { get; set; }

        /// changes data to a RN-importable stringarray
        internal String[] getEDDNCSVImportStrings()
        {
            int size                = this.Message.Commodities.GetUpperBound(0)+1;
            string[] csvFormatted   = new String[size];

            for (int i = 0; i < size; i++)
            {
            	Commodity_Class Commodity = this.Message.Commodities[i];

                //System;Location;Commodity_Class;Sell;Buy;Demand;DemandLevel;Supply;SupplyLevel;Date;
                csvFormatted[i] = this.Message.SystemName + ";" +
                                  this.Message.StationName + ";" +
                                  Commodity.Name + ";" +
                                  (Commodity.SellPrice == 0 ? "" : Commodity.SellPrice.ToString()) + ";" +
                                  (Commodity.BuyPrice == 0 ? "" : Commodity.BuyPrice.ToString()) + ";" +
                                  Commodity.Demand.ToString() + ";" +
                                  Commodity.DemandBracket + ";" +
                                  Commodity.Stock.ToString() + ";" +
                                  Commodity.StockBracket + ";" +
                                  this.Message.Timestamp.ToString() + ";"
                                  +
                                  "EDDN" + ";";		 
            }

            return csvFormatted;
        }

        /// <summary>
        /// returns, if this is a main message or only a message from the test schema
        /// </summary>
        /// <returns></returns>
        public Boolean isTest()
        { 
            return SchemaRef.EndsWith("/test");
        }


    }

}
